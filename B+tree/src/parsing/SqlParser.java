/* Generated By:JavaCC: Do not edit this line. SqlParser.java */
package parsing;
import DMLExecution.test;
import java.util.List;
import java.util.ArrayList;

public class SqlParser implements SqlParserConstants {

    private List<Object> sql = new ArrayList<Object>();
    private List<Object> list = new ArrayList<Object>();
    private ArrayList<Object> templist = new ArrayList<Object>();

    public static void main(String[] args) throws Exception {
        SqlParser parser = new SqlParser(System.in);
        parser.parse();
        System.out.println("sql is correct!");


    }

  final public void parse() throws ParseException {
    Token t;
    sql = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      jj_consume_token(SELECT);
        t = new Token();
        t.image = "select";
        System.out.println(t.image);
        sql.add(t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
      case DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DISTINCT:
          jj_consume_token(DISTINCT);
          break;
        case ALL:
          jj_consume_token(ALL);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      selectResultList();
      jj_consume_token(FROM);
      fromTables();
      where();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATEMENT_END:
        jj_consume_token(STATEMENT_END);
        break;
      case END:
        jj_consume_token(END);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case INSERT:
      jj_consume_token(INSERT);
      jj_consume_token(INTO);
      jj_consume_token(ID);
      jj_consume_token(VALUES);
      jj_consume_token(LBRACKET);
      jj_consume_token(ID);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        jj_consume_token(ID);
      }
      jj_consume_token(RBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATEMENT_END:
        jj_consume_token(STATEMENT_END);
        break;
      case END:
        jj_consume_token(END);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case VALUES:
      jj_consume_token(VALUES);
      jj_consume_token(LBRACKET);
      values();
      jj_consume_token(RBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATEMENT_END:
        jj_consume_token(STATEMENT_END);
        break;
      case END:
        jj_consume_token(END);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case UPDATE:
      jj_consume_token(UPDATE);
      jj_consume_token(ID);
      jj_consume_token(SET);
      sets();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        where();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATEMENT_END:
        jj_consume_token(STATEMENT_END);
        break;
      case END:
        jj_consume_token(END);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case DELETE:
      delete();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//ÊääTokenÂ≠òÂà∞sqlÈá?
  final public void saveTokenInSQL(Token a) throws ParseException {
    Token t;
        t = a;
        System.out.println(t.image+" : "+t.kind);
        sql.add(t);
  }

//ÊäälistÂ≠òÂà∞sqlÈá?
  final public void saveListInSQL(List<Object> a) throws ParseException {
        sql.add(a);
  }

//ÊääTokenÂ≠òÂà∞listÈá?
  final public void saveTokenInList(Token a,List<Object> l) throws ParseException {
    Token t;
        t = a;
        System.out.println("------->"+t.image+" : "+t.kind);
        l.add(t);
  }

//ÊääTempListÂ≠òÂà∞listÈá?
  final public void saveTempListInList(List<Object> temp,List<Object> l) throws ParseException {
        System.out.print("  list is : ");
        for (Object object : temp)
        {
            System.out.println(object);
        }
        System.out.println("");

        l.add(temp);
  }

  final public void show() throws ParseException {
        System.out.println("----------STRUCTURE----------");
        for (Object object : sql)
        {
            System.out.println(object);
        }
  }

  final public void delete() throws ParseException {
    Token t;
    sql = new ArrayList<Object>();
        System.out.println("------DELETE METHOD --------");
    t = jj_consume_token(DELETE);
        saveTokenInSQL(t);
    t = jj_consume_token(FROM);
        saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      t = jj_consume_token(ASTERISK);
      break;
    case ID:
      t = jj_consume_token(ID);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      where();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
        show();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATEMENT_END:
      jj_consume_token(STATEMENT_END);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//whereËØ≠Âè•
  final public void where() throws ParseException {
 Token t;
    t = jj_consume_token(WHERE);
        saveTokenInSQL(t);
    multiCondition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP_BY:
    case ORDER_BY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER_BY:
        orderBy();
        break;
      case GROUP_BY:
        groupBy();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

// Â§öÊù°‰ª∂Âπ∂ÂàóÁöÑÊó∂Â??
  final public void multiCondition() throws ParseException {
    Token t;
    int i = 0;// i = 0 Ë°®Á§∫Âè™Êúâ‰∏?‰∏™conditionÔº?=1 Ë°®Á§∫ÊúâÂ§ö‰∏™condition
    list = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      condition();
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      condition();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case AND:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t = jj_consume_token(AND);
                         saveTokenInList(t,list); i = 1;
        break;
      case OR:
        t = jj_consume_token(OR);
                         saveTokenInList(t,list); i = 1;
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        condition();
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        condition();
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        if( i == 0)
        {
           list = templist;
           saveListInSQL(list);
           System.out.println("Only one condition");
        }
        else
        {
           saveListInSQL(list);
        }
  }

//Â∞èÊÉÖÂÜµÔºõÂ∞èÊù°‰ª?
  final public void condition() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case GT:
    case LT:
    case NE:
    case LIKE:
      simpleCondition();
      break;
    case BETWEEN:
      betweenCondition();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void name() throws ParseException {
 Token t;
    t = jj_consume_token(ID);
    //templist.add(t);
    saveTokenInList(t,templist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

//ÁÆ?ÂçïÊù°‰ª?
  final public void simpleCondition() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
                        saveTokenInList(t,templist);
      break;
    case GT:
      t = jj_consume_token(GT);
                                                                              saveTokenInList(t,templist);
      break;
    case LT:
      t = jj_consume_token(LT);
                        saveTokenInList(t,templist);
      break;
    case NE:
      t = jj_consume_token(NE);
                                                                              saveTokenInList(t,templist);
      break;
    case LIKE:
      t = jj_consume_token(LIKE);
                        saveTokenInList(t,templist);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    rightCondition();
  }

  final public void rightCondition() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      // ‚Ä?/‚Ä? ÔºåÊï∞Â≠óÔºåÂäüËÉΩ
            t = jj_consume_token(STRING);
              saveTokenInList(t,templist);
//              if( list.size() == 0)
//              {
////                  list = templist;
////                  saveListInSQL(list);
//              }
//              else
//              {
                saveTempListInList(templist,list);
//              }

      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
               saveTokenInList(t,templist);
//               if( list.size() == 0)
//               {
//                   //list = templist;
//                   //saveListInSQL(list);
//               }
//               else
//               {
                    saveTempListInList(templist,list);
//               }

      break;
    case ID:
      function();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//ÂäüËÉΩÊñπÊ≥ï
  final public void function() throws ParseException {
 Token t;
    //  id (ÔºàÂ§öÔºâÂèÇÊï? )
         t = jj_consume_token(ID);
        saveTokenInList(t,templist);
//        if( list.size() == 0)
//        {
////            System.out.println("Only one condition");
////            list = templist;
////            saveListInSQL(list);
//        }
//        else
//        {
            saveTempListInList(templist,list);
//        }

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      arguments();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

// Between ...  AND ... Êù°‰ª∂ËØ≠Âè•
  final public void betweenCondition() throws ParseException {
 Token t;
    jj_consume_token(BETWEEN);
    rightCondition();
    jj_consume_token(AND);
    rightCondition();
  }

//ÔºàÂ§öÔºâÂèÇÊï∞ÂáΩÊï?
  final public void arguments() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      argument();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        argument();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

// ‰∏?ÁªÑÂèÇÊï?
  final public void argument() throws ParseException {
 Token t;
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void selectResultList() throws ParseException {
 Token t;
    System.out.println("------SELECT METHOD --------");
    selectResult();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      selectResult();
    }
  }

  final public void selectResult() throws ParseException {
 Token t;
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  final public void fromTables() throws ParseException {
 Token t;
    table();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      table();
    }
  }

  final public void table() throws ParseException {
 Token t;
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

//void arguments() :
//{}
//{
// (
//    argument()
//    (
//        ","
//     argument()
//    )*
// )?
//}
  final public void values() throws ParseException {
    value();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      value();
    }
  }

  final public void value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void orderBy() throws ParseException {
    jj_consume_token(ORDER_BY);
    name();
  }

  final public void groupBy() throws ParseException {
    jj_consume_token(GROUP_BY);
    name();
  }

  final public void sets() throws ParseException {
    set();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      set();
    }
  }

  final public void set() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(EQ);
    rightCondition();
  }

  /** Generated Token Manager. */
  public SqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1010000,0x1010000,0x0,0x0,0x0,0x0,0x400000,0x0,0x807800,0x0,0x400000,0x0,0x300000,0x300000,0x2000000,0x80000000,0x80000000,0x2000000,0x78000000,0x0,0x78000000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x10000100,0x0,0x0,0x0,0x0,0x10000000,0x1,0x1,0x10000000,0x6,0x2000,0x2,0x30000000,0x0,0x800,0x10000000,0x20000000,0x800,0x2000,0x0,0x800,0x10000000,0x800,0x20000000,0x800,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x6,0x0,0x6,0x6,0x0,0x6,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,};
   }

  /** Constructor with InputStream. */
  public SqlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SqlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SqlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SqlParser(SqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
