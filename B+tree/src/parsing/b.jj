options {
    static=false;
    IGNORE_CASE=true;
}

PARSER_BEGIN(SqlParser)
package parsing;
import DMLExecution.test;
import java.util.List;
import java.util.ArrayList;

public class SqlParser {

    private List<Object> sql = new ArrayList<Object>();
    private List<Object> list = new ArrayList<Object>();
    private ArrayList<Object> templist = new ArrayList<Object>();

    public static void main(String[] args) throws Exception {
        SqlParser parser = new SqlParser(System.in);
        parser.parse();
        System.out.println("sql is correct!");


    }
}
PARSER_END(SqlParser)

SKIP :
{
 " "|"\t"|"\r"|"\n"|"\f"
}

MORE :
{
 "//" : IN_SINGLE_LINE_COMMENT
|
 "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <SINGLE_LINE_COMMENT : "/r" | "/n" | "/r/n"> : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
<MULTI_LINE_COMMENT : "*/"> : DEFAULT
}
<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
<~[]>
}

TOKEN [IGNORE_CASE]:
{
<SELECT : "select">
|
<INSERT : "insert">
|
<UPDATE : "update">
|
<DELETE : "delete">
}

TOKEN [IGNORE_CASE]:
{
<AS : "as">
|
<ALL : "all">
|
<SET : "set">
|
<FROM : "from">
|
<INTO : "into">
|
<GROUP_BY : "group" ([" "])+ "by">
|
<ORDER_BY : "order" ([" "])+ "by">
|
<WHERE : "where">
|
<VALUES : "values">
|
<DISTINCT : "distinct">
}

TOKEN :
{
<LBRACKET : "(">
|<RBRACKET : ")">
|<EQ : "=">
|<GT : ">=">
|<LT : "<=">
|<NE : "!=">
|<OR : "or">
|<AND : "and">
|<LIKE : "like">
|<BETWEEN : "between">
|	<PERCENT: "%">
|	<AMPERSAND: "&">
|	<QUOTE: "'">
|	<LEFT_BRACE: "{">
|	<RIGHT_BRACE: "}">
|	<ASTERISK: "*">
|	<HASH: "#">
|	<PLUS_SIGN: "+">
|	<COMMA: ",">
|	<MINUS_SIGN: "-">
|	<DOT: ".">
|	<SOLIDUS: "/">
|	<COLON: ":">
|	<DOUBLE_COLON: "::">
|	<LESS_THAN_OPERATOR: "<">
|	<NOT_EQUALS_OPERATOR: "<>">
|	<GREATER_THAN_OPERATOR: ">">
|	<QUESTION_MARK: "?">
|	<UNDERSCORE: "_">
|	<VERTICAL_BAR: "|">
|	<LEFT_BRACKET: "[">
|	<RIGHT_BRACKET: "]">
|	<CONCATENATION_OPERATOR: "||">
|	<FIELD_REFERENCE: "->">
|	<ELLIPSIS: "...">
}


TOKEN :
{

<ID : <LETTER> (<LETTER>|<DIGIT>)*>
|
<NUMBER: (<DIGIT>)+ (<DOT>(<DIGIT>)*)?>
|
<#LETTER : ["a"-"z","A"-"Z","_"]>
|
<#DIGIT : ["0"-"9"]>
|
<STRING : "/'" (~["/"])* ("///'")? (~["/"])* "/'">
}

TOKEN :
{
<STATEMENT_END : ";">
|
<END : "!!">
}

void parse() :
{
    Token t;
    sql = new ArrayList<Object>();
}
{
    //***************SELECT************
    <SELECT>
    {
        t = new Token();
        t.image = "select";
        System.out.println(t.image);
        sql.add(t);

    }
    (<DISTINCT> | <ALL>)?selectResultList()
    <FROM>fromTables()where()(<STATEMENT_END> | <END>)

    //***************INSERT************
    |   //only support simple insert statement
    <INSERT><INTO><ID> //TABLE NAME
    <VALUES>
    <LBRACKET><ID>(","<ID>)*<RBRACKET>(<STATEMENT_END> | <END>)

    |<VALUES>
    <LBRACKET>values() <RBRACKET>
    (<STATEMENT_END> | <END>)

    //***************UPDATE************
    |<UPDATE><ID><SET>sets()( where() )?(<STATEMENT_END> | <END>)

    //***************DELETE************
    |

    delete()
}

//把Token存到sql里
void saveTokenInSQL(Token a) :
{
    Token t;
}
{
    {
        t = a;
        System.out.println(t.image+" : "+t.kind);
        sql.add(t);
    }
}

//把list存到sql里
void saveListInSQL(List<Object> a) :
{}
{
    {
        sql.add(a);
    }
}

//把Token存到list里
void saveTokenInList(Token a,List<Object> l) :
{
    Token t;
}
{
    {
        t = a;
        System.out.println("------->"+t.image+" : "+t.kind);
        l.add(t);
    }
}

//把TempList存到list里
void saveTempListInList(List<Object> temp,List<Object> l) :
{}
{
    {
        System.out.print("  list is : ");
        for (Object object : temp)
        {
            System.out.println(object);
        }
        System.out.println("");

        l.add(temp);
    }
}


void show() :
{}
{
    {
        System.out.println("----------STRUCTURE----------");
        for (Object object : sql)
        {
            System.out.println(object);
        }

    }
}

void delete() :
{
    Token t;
    sql = new ArrayList<Object>();
}
{
    {   System.out.println("------DELETE METHOD --------"); }
    t =  <DELETE>
    {
        saveTokenInSQL(t);
    }
    t =<FROM>
    {
        saveTokenInSQL(t);
    }

    (t = <ASTERISK>|t = <ID> )
    {    saveTokenInSQL(t);  }

    (where() )?

    {   show(); }
    (<STATEMENT_END> | <END>)


//    {test.testWhereAnd(sql);} // %%
}

//where语句
void where() :
{Token t;}
{
    t = <WHERE>
    {   saveTokenInSQL(t);   }


    multiCondition()
    (orderBy() | groupBy())?
}

// 多条件并列的时候
void multiCondition() :
{
    Token t;
    int i = 0;// i = 0 表示只有一个condition；=1 表示有多个condition
    list = new ArrayList<Object>();
}
{

 (
    //好多个小条件
    condition()
    |
    "(" condition() ")"
 )

 (
    // 和或并好多个小条件
    (     t = <AND>  {   saveTokenInList(t,list); i = 1; }
        | t = <OR>   {   saveTokenInList(t,list); i = 1;}
    )

    (
        condition() | "(" condition() ")"
    )
 )*
    {
        if( i == 0)
        {
           list = templist;
           saveListInSQL(list);
           System.out.println("Only one condition");
        }
        else
        {
           saveListInSQL(list);
        }
    }

}

//小情况；小条件
void condition() :
{
    Token t;
    templist = new ArrayList<Object>();
}
{
 name()
 (
    //加减乘除+right   // between & and
    simpleCondition()|betweenCondition()
 )
}

void name() :
{Token t;}
{
 t = <ID>
 {
    //templist.add(t);
    saveTokenInList(t,templist);
 }
 (
    "."
    <ID>
 )?

}

//简单条件
void simpleCondition() :
{Token t;}
{
    //判断条件
    (t = <EQ>       {   saveTokenInList(t,templist);   }    |   t =  <GT> {   saveTokenInList(t,templist);   }
    |t =  <LT>      {   saveTokenInList(t,templist);   }    |   t =  <NE> {   saveTokenInList(t,templist);   }
    |t =  <LIKE>    {   saveTokenInList(t,templist);   })
    rightCondition()
}

void rightCondition() :
{Token t;}
{
    // “/” ，数字，功能
      t = <STRING>
          {
              saveTokenInList(t,templist);
//              if( list.size() == 0)
//              {
////                  list = templist;
////                  saveListInSQL(list);
//              }
//              else
//              {
                saveTempListInList(templist,list);
//              }

          }
    | t = <NUMBER>
          {
               saveTokenInList(t,templist);
//               if( list.size() == 0)
//               {
//                   //list = templist;
//                   //saveListInSQL(list);
//               }
//               else
//               {
                    saveTempListInList(templist,list);
//               }
          }

    | function()
}

//功能方法
void function() :
{Token t;}
{
    //  id (（多）参数 )
     t = <ID>
     {
        saveTokenInList(t,templist);
//        if( list.size() == 0)
//        {
////            System.out.println("Only one condition");
////            list = templist;
////            saveListInSQL(list);
//        }
//        else
//        {
            saveTempListInList(templist,list);
//        }
     }
     (<LBRACKET> arguments() <RBRACKET>)?
}

// Between ...  AND ... 条件语句
void betweenCondition() :
{Token t;}
{
    <BETWEEN>
    rightCondition()
    <AND>
    rightCondition()
}




//（多）参数函数
void arguments() :
{Token t;}
{
 (
    argument()// 一组参数
    (
        ","
     argument()
    )* // 或者多组参数
 )?
}

// 一组参数
void argument() :
{Token t;}
{
    // id ("/"或数字)
 <ID>
 (
    <STRING>|<NUMBER>
 )
}

void selectResultList() :
{Token t;}
{
{   System.out.println("------SELECT METHOD --------"); }
    selectResult()
    (
    ","
    selectResult()
    )*
}

void selectResult() :
{Token t;}
{
    <ID>(<DOT><ID>)?(<AS><ID>)?
}

void fromTables() :
{Token t;}
{
 table()
 (
    ","
    table()
 )*
}

void table() :
{Token t;}
{
 <ID>
 (<ID>)?
}




//void arguments() :
//{}
//{
// (
//    argument()
//    (
//        ","
//     argument()
//    )*
// )?
//}



void values() :
{}
{
     value()
    (
        ","
        value()
    )*
}

void value() :
{}
{
 <STRING>|<NUMBER>
}


void orderBy() :
{}
{
    <ORDER_BY>
    name()
}

void groupBy() :
{}
{
 <GROUP_BY>
 name()
}

void sets() :
{}
{
 set()
 (
    ","
    set()
 )*
}

void set() :
{}
{
 <ID>
 <EQ>
 rightCondition()
}
